;--
/// Controls
0 ─ Pause  Continue
Z ─ Select Slot (1-9)
* ┬ Cycle Mode1s
//├─┬ Playback (⭯)
  │ ╰ # ─ Play ○ Stop
//╰─┬ Record
    ╰ # ─ Record ○ Stop
--;

[dictaphone]
exten => _[A-D],1,NoOp()
 same => n,Set(MODES=P|PR|R)
 same => n,Set(USER=${CDR(source)})
 same => n,Set(DIRWORK=${ASTSPOOLDIR}/dictaphone)
 same => n,Set(LOCKFILE=${DIRWORK}/${USER}.lock)
 same => n,Gosub(sub-check-lock,1)
 same => n,Set(STOREFILE=${DIRWORK}/${USER}.txt)
 same => n,Set(STOREDATA=${SHELL(cat ${STOREFILE} 2>/dev/null | tr -d "\r\n")})
 same => n,Set(ISVALID=${REGEX("^(PR?|R)\,[A-D]\,[1-9]$" ${STOREDATA})})
 same => n,Set(ARRAY(MODE,GROUP,SLOT)=${IF($[${ISVALID}]?${STOREDATA}:R,${EXTEN},1)})
 same => n,Gosub(sub-ready,1)

exten => sub-check-lock,1,NoOp()
 same => n,System(test -e ${LOCKFILE})
 same => n,Set(LOCKED=$["${SYSTEMSTATUS}"=="SUCCESS"])
 same => n,ExecIf($[${LOCKED}]?Busy(0))
 same => n,Set(HANDLER=dictaphone,sub-remove-lock,1)
 same => n,Set(CHANNEL(hangup_handler_push)=${HANDLER})
 same => n,System(touch ${LOCKFILE})
 same => n,Return()

exten => sub-remove-lock,1,NoOp()
 same => n,System(rm ${LOCKFILE})
 same => n,Return()

exten => sub-ready,1,NoOp()
 same => n,Set(S=${ARG1})
 same => n,GotoIf($["${S}"!=""]?custom)
 same => n,Gosub(sub-slot-exists,1)
 same => n,Set(S=▣  Ready)
 same => n,Set(S=${IF($["${EXISTS}"=="NO"]?☐  Blank:${S})})
 same => n,Set(S=${IF($["${EXISTS}"!="NO"&"${MODE}"=="R"]?▣  Used:${S})})
 same => n(custom),Gosub(sub-set-status,1(${S}))
 same => n,Answer()
 same => n(wait),WaitDigit(60)
 same => n,GotoIf($["${WAITDIGITSTATUS}"!="DTMF"]?wait)
 same => n,Gosub(sub-do,1(${WAITDIGITRESULT}))

exten => sub-do,1,NoOp()
 same => n,Set(KEY=${ARG1})
 same => n,GosubIf($["${KEY}"=="#"]?sub-${IF($["${MODE}"=~"^PR?"]?play,1:record,1)})
 same => n,GosubIf($["${KEY}"=="*"]?sub-cycle-modes,1)
 same => n,GosubIf($["${KEY}"=~"[1-9]"]?sub-set-slot,1(${KEY},1))
 same => n,Gosub(sub-ready,1)

exten => sub-record,1,NoOp()
 same => n,Set(ARRAY(CONTINUE,KEY)=0${ARG1},)
 same => n,ExecIf($[!${CONTINUE}]?Playback(beep))
 same => n,StoreDTMF(RX,KEY,1)
 same => n,Gosub(sub-set-status,1(○  Recording))
 same => n,Record(${RECFILE},5,0,qky${IF($[${CONTINUE}]?a)})
 same => n,StoreDTMF(remove)
 same => n,Set(RSTATUS=${RECORD_STATUS})
 same => n,GosubIf($["${KEY}"=="0"]?sub-pause,1)
 same => n,Gosub(sub-finalise-recording,1(${KEY}))

exten => sub-finalise-recording,1,NoOp()
 same => n,Set(KEY=${ARG1})
 same => n,Set(DURATION=${SHELL(printf "$(soxi -D ${RECFILE})")})
 same => n,Set(RSTATUS=${IF($["${RSTATUS}"!="SILENCE"&${DURATION}<1.1]?TOOSHORT:${RSTATUS})})
 same => n,Set(FAILED=$["${RSTATUS}"!="DTMF"&"${RSTATUS}"!="HANGUP"])
 same => n,System(${IF($[${FAILED}]?"rm ${RECFILE}":"mv ${RECFILE} ${FILE}.wav")})
 same => n,Set(GOREADY=$["${KEY}"=="#"|"${KEY}"=="${SLOT}"|"${RSTATUS}"=="SILENCE"])
 same => n,GosubIf($[${GOREADY}]?sub-ready,1(${IF($[${FAILED}]?☒  Failed:☑  Success)}))
 same => n,Gosub(sub-do,1(${KEY}))

exten => sub-play,1,NoOp()
 same => n,GotoIf($["${EXISTS}"=="NO"]?exit)
 same => n,Set(CONTINUE=0${ARG1})
 same => n,Gosub(sub-set-status,1(▷  Playing))
 same => n,ExecIf($[!${CONTINUE}]?Set(CPLAYBACKOFFSET=))
 same => n(p),ControlPlayback(${FILE},,,,*#0123456789,,,o(0${CPLAYBACKOFFSET}))
 same => n,ExecIf($["${CPLAYBACKSTATUS}"!="USERSTOPPED"]?Set(CPLAYBACKSTOPKEY=))
 same => n,GosubIf($["${CPLAYBACKSTOPKEY}"=="0"]?sub-pause,1)
 same => n,GosubIf($["${CPLAYBACKSTOPKEY}"=="#"]?sub-ready,1)
 same => n,GosubIf($["${CPLAYBACKSTOPKEY}"!=""]?sub-do,1(${CPLAYBACKSTOPKEY}))
 same => n,GotoIf($["${MODE}"=="PR"]?p)
 same => n(exit),Gosub(sub-ready,1)

exten => sub-pause,1,NoOp()
 same => n,Gosub(sub-set-status,1(I I  Paused))
 same => n(wait),WaitDigit(60)
 same => n,GotoIf($["${WAITDIGITSTATUS}"!="DTMF"]?wait)
 same => n,GosubIf($["${WAITDIGITRESULT}"=="0"]?sub-${IF($["${MODE}"=~"^PR?"]?play,1(1):record,1(1))})
 same => n,GosubIf($["${MODE}"=="R"]?sub-finalise-recording,1(${WAITDIGITRESULT}))
 same => n,GosubIf($["${WAITDIGITRESULT}"=="#"]?sub-ready,1)
 same => n,Gosub(sub-do,1(${WAITDIGITRESULT})) 

exten => sub-cycle-modes,1,NoOp()
 same => n,Set(MODEIDXMAX=${FIELDQTY(MODES,|)})
 same => n,Set(MODEIDXNEW=$[${FIELDNUM(MODES,|,${MODE})}+1])
 same => n,Set(MODEIDXNEW=$[${MODEIDXNEW}>${MODEIDXMAX}?1::${MODEIDXNEW}])
 same => n,Set(MODE=${CUT(MODES,|,${MODEIDXNEW})})
 same => n,Gosub(sub-update-store,1)
 same => n,Return()

exten => sub-set-slot,1,NoOp()
 same => n,Set(ARRAY(SLOT,PLAYNOW)=${ARG1},$[0${ARG2}&"${MODE}"=~"^PR?"])
 same => n,Gosub(sub-slot-exists,1)
 same => n,Gosub(sub-update-store,1)
 same => n,GosubIf($[${PLAYNOW}]?sub-play,1)
 same => n,Return()

exten => sub-set-status,1,NoOp()
 same => n,Set(STATUS=${ARG1})
 same => n,Gosub(sub-update-title,1)
 same => n,Return()

exten => sub-slot-exists,1,NoOp()
 same => n,Set(FILE=${DIRWORK}/${USER}.${GROUP}.${SLOT})
 same => n,Set(EXISTS=${SHELL(test -e ${FILE}.wav && printf "YES" || printf "NO")})
 same => n,Set(RECFILE=${FILE}.NEW.wav)
 same => n,Return()

exten => sub-update-store,1,NoOp()
 same => n,System(mkdir -p ${DIRWORK} && echo "${MODE},${GROUP},${SLOT}" > ${STOREFILE})
 same => n,Return()

exten => sub-update-title,1,NoOp()
 same => n,Set(TMODE=${IF($["${MODE}"=~"^PR?"]?Playback:Record)})
 same => n,Set(TREPEAT=${IF($["${MODE}"=="PR"]? ⭯)})
 same => n,Set(CONNECTEDLINE(name,i)=Dictaphone:${TMODE}${TREPEAT}  •  ${SLOT}  •  ${STATUS})
 same => n,Set(CONNECTEDLINE(num)=${CALLERID(dnid)})
 same => n,Return()